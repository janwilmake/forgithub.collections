{
  "version": 3,
  "sources": ["../../../index.js"],
  "sourceRoot": "/Users/admin/Desktop/p1/forgithub.collections/.wrangler/tmp/deploy-hSGZUg",
  "sourcesContent": ["// Import HTML templates\nimport homepageHtml from \"./homepage.html\";\nimport ownerListsHtml from \"./owner-lists.html\";\nimport listDetailHtml from \"./list-detail.html\";\nimport errorHtml from \"./error.html\";\n\nconst API_BASE_URL = \"https://cache.forgithub.com\";\n\nexport default {\n  async fetch(request, env, ctx) {\n    const url = new URL(request.url);\n    const path = url.pathname;\n\n    try {\n      // Homepage route\n      if (path === \"/\" || path === \"\") {\n        return new Response(homepageHtml, {\n          headers: { \"Content-Type\": \"text/html\" },\n        });\n      }\n\n      // Route patterns\n      const ownerPattern = /^\\/([^\\/]+)$/;\n      const listDetailPattern = /^\\/([^\\/]+)\\/([^\\/]+)$/;\n\n      // Owner lists route\n      const ownerMatch = path.match(ownerPattern);\n      if (ownerMatch) {\n        const owner = ownerMatch[1];\n        return await handleOwnerLists(owner);\n      }\n\n      // List detail route\n      const listDetailMatch = path.match(listDetailPattern);\n      if (listDetailMatch) {\n        const owner = listDetailMatch[1];\n        const listId = listDetailMatch[2];\n        return await handleListDetail(owner, listId);\n      }\n\n      // If no routes match, return a 404\n      return new Response(\n        errorHtml.replaceAll(\"{{ERROR_MESSAGE}}\", \"Page not found\"),\n        {\n          status: 404,\n          headers: { \"Content-Type\": \"text/html\" },\n        },\n      );\n    } catch (error) {\n      console.error(\"Error handling request:\", error);\n      return new Response(\n        errorHtml.replaceAll(\n          \"{{ERROR_MESSAGE}}\",\n          error.message || \"An error occurred\",\n        ),\n        {\n          status: 500,\n          headers: { \"Content-Type\": \"text/html\" },\n        },\n      );\n    }\n  },\n};\n\n/**\n * Handle the owner lists page\n */\nasync function handleOwnerLists(owner) {\n  try {\n    // Fetch starred repos data from the API\n    const response = await fetch(`${API_BASE_URL}/stars/${owner}`);\n\n    if (!response.ok) {\n      throw new Error(\n        `Failed to fetch lists for ${owner}: ${response.statusText}`,\n      );\n    }\n\n    const data = await response.json();\n\n    // Create HTML for each list\n    let listsHtml = \"\";\n\n    if (data.lists && data.lists.length > 0) {\n      data.lists.forEach((list) => {\n        const repoCount = list.totalRepositories;\n        listsHtml += `\n          <a href=\"/${owner}/${\n          list.slug\n        }\" class=\"block bg-gray-800 p-6 rounded-lg hover:bg-gray-700 transition-all duration-300\">\n            <h3 class=\"text-xl font-bold text-white mb-2\">${escapeHtml(\n              list.name,\n            )}</h3>\n            <p class=\"text-gray-300 mb-4\">${\n              list.description ? escapeHtml(list.description) : \"No description\"\n            }</p>\n            <div class=\"flex justify-between items-center\">\n              <span class=\"text-purple-400\">${repoCount} repositor${\n          repoCount === 1 ? \"y\" : \"ies\"\n        }</span>\n              <span class=\"text-gray-400 text-sm\">Updated: ${formatDate(\n                list.updatedAt,\n              )}</span>\n            </div>\n          </a>\n        `;\n      });\n    } else {\n      listsHtml = `\n        <div class=\"bg-gray-800 p-6 rounded-lg\">\n          <p class=\"text-gray-300\">No lists found for ${escapeHtml(owner)}</p>\n        </div>\n      `;\n    }\n\n    // Also show a section with starred repos that aren't in any list\n    let starredReposHtml = \"\";\n\n    if (data.stars && data.stars.length > 0) {\n      // Only show top 10 starred repos\n      const topStars = data.stars.slice(0, 10);\n\n      topStars.forEach((repo) => {\n        starredReposHtml += `\n          <div class=\"bg-gray-800 p-4 rounded-lg\">\n            <h4 class=\"text-white font-bold\">${escapeHtml(repo.name)}</h4>\n            <p class=\"text-gray-300 text-sm truncate\">${\n              repo.description ? escapeHtml(repo.description) : \"No description\"\n            }</p>\n            <div class=\"flex justify-between mt-2\">\n              <span class=\"text-xs text-purple-400\">\u2B50 ${\n                repo.stargazers_count\n              }</span>\n              <a href=\"${\n                repo.html_url\n              }\" target=\"_blank\" class=\"text-xs text-blue-400 hover:underline\">View on GitHub</a>\n            </div>\n          </div>\n        `;\n      });\n    } else {\n      starredReposHtml = `\n        <div class=\"bg-gray-800 p-4 rounded-lg\">\n          <p class=\"text-gray-300\">No starred repositories found</p>\n        </div>\n      `;\n    }\n\n    // Replace placeholders in the HTML template\n    let html = ownerListsHtml\n      .replaceAll(\"{{OWNER}}\", escapeHtml(owner))\n      .replaceAll(\"{{LISTS}}\", listsHtml)\n      .replaceAll(\"{{STARRED_REPOS}}\", starredReposHtml);\n\n    return new Response(html, {\n      headers: { \"Content-Type\": \"text/html\" },\n    });\n  } catch (error) {\n    console.error(`Error in handleOwnerLists:`, error);\n    return new Response(\n      errorHtml.replaceAll(\n        \"{{ERROR_MESSAGE}}\",\n        `Failed to load lists for ${owner}: ${error.message}`,\n      ),\n      {\n        status: 500,\n        headers: { \"Content-Type\": \"text/html\" },\n      },\n    );\n  }\n}\n\n/**\n * Handle the list detail page\n */\nasync function handleListDetail(owner, listId) {\n  try {\n    // Fetch starred repos data from the API\n    const response = await fetch(`${API_BASE_URL}/stars/${owner}`);\n\n    if (!response.ok) {\n      throw new Error(\n        `Failed to fetch data for ${owner}: ${response.statusText}`,\n      );\n    }\n\n    const data = await response.json();\n\n    // Find the requested list\n    const list = data.lists.find((l) => l.slug === listId);\n\n    if (!list) {\n      return new Response(\n        errorHtml.replaceAll(\n          \"{{ERROR_MESSAGE}}\",\n          `List \"${listId}\" not found for ${owner}`,\n        ),\n        {\n          status: 404,\n          headers: { \"Content-Type\": \"text/html\" },\n        },\n      );\n    }\n\n    // Create HTML for repositories in the list\n    let reposHtml = \"\";\n\n    if (list.repositories && list.repositories.length > 0) {\n      list.repositories.forEach((repo) => {\n        reposHtml += `\n          <div class=\"bg-gray-800 p-6 rounded-lg hover:bg-gray-700 transition-all duration-300\">\n            <div class=\"flex justify-between items-center mb-3\">\n              <h3 class=\"text-xl font-bold text-white\">${escapeHtml(\n                repo.name,\n              )}</h3>\n              <span class=\"text-purple-400\">\u2B50 ${repo.stars}</span>\n            </div>\n            <p class=\"text-gray-300 mb-4\">${\n              repo.description ? escapeHtml(repo.description) : \"No description\"\n            }</p>\n            <div class=\"flex justify-between items-center\">\n              <span class=\"text-gray-400\">${escapeHtml(repo.owner)}</span>\n              <a href=\"${repo.url}\" target=\"_blank\" rel=\"noopener noreferrer\" \n                 class=\"text-blue-400 hover:underline flex items-center gap-1\">\n                View on GitHub\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"></path>\n                  <polyline points=\"15 3 21 3 21 9\"></polyline>\n                  <line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\"></line>\n                </svg>\n              </a>\n            </div>\n          </div>\n        `;\n      });\n    } else {\n      reposHtml = `\n        <div class=\"bg-gray-800 p-6 rounded-lg\">\n          <p class=\"text-gray-300\">No repositories found in this list</p>\n        </div>\n      `;\n    }\n\n    // Replace placeholders in the HTML template\n    let html = listDetailHtml\n      .replaceAll(\"{{OWNER}}\", escapeHtml(owner))\n      .replaceAll(\"{{LIST_NAME}}\", escapeHtml(list.name))\n      .replaceAll(\n        \"{{LIST_DESCRIPTION}}\",\n        list.description ? escapeHtml(list.description) : \"No description\",\n      )\n      .replaceAll(\"{{REPOS}}\", reposHtml);\n\n    return new Response(html, {\n      headers: { \"Content-Type\": \"text/html\" },\n    });\n  } catch (error) {\n    console.error(`Error in handleListDetail:`, error);\n    return new Response(\n      errorHtml.replaceAll(\n        \"{{ERROR_MESSAGE}}\",\n        `Failed to load list \"${listId}\" for ${owner}: ${error.message}`,\n      ),\n      {\n        status: 500,\n        headers: { \"Content-Type\": \"text/html\" },\n      },\n    );\n  }\n}\n\n/**\n * Format a date string\n */\nfunction formatDate(dateString) {\n  const date = new Date(dateString);\n  return date.toLocaleDateString(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n  });\n}\n\n/**\n * Escape HTML to prevent XSS\n */\nfunction escapeHtml(str) {\n  if (!str) return \"\";\n  return str\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#039;\");\n}\n"],
  "mappings": "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",
  "names": []
}
